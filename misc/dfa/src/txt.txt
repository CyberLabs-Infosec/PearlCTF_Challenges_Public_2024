ooooooooo.   oooooooooooo       .o.       ooooooooo.   ooooo        
`888   `Y88. `888'     `8      .888.      `888   `Y88. `888'        
 888   .d88'  888             .8"888.      888   .d88'  888         
 888ooo88P'   888oooo8       .8' `888.     888ooo88P'   888         
 888          888    "      .88ooo8888.    888`88b.     888         
 888          888       o  .8'     `888.   888  `88b.   888       o 
o888o        o888ooooood8 o88o     o8888o o888o  o888o o888ooooood8 

Welcome to The Finite State Machine:
=======================RULES===========================
The flag is set as the input string, and the alphabets of the language are set to a-z, {, }, _.
Here, you can define your own states and transitions.
If there is no defined transition for a particular letter, then the machine gets trapped.
It must be a DFA, not an NFA.
An output of 1 means that the string is present in the language; 0 means otherwise.
'@' takes the machine from one state to another by consuming any one letter.
'~l' takes the machine from one state to another by consuming one letter unless the letter is 'l'.
Example: '5 @ 6' takes the machine from state 5 to state 6 for all letters.
Example: '6 ~b 7' takes the machine from state 6 to state 7 for all letters except 'b'.
=================================================